@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script></script>
```<style></style>
``</head>
``<body>
``</body>
`</html>
@header
Revisit the 'ole html
@comment
In this lesson we shall learn about canvas, function creation, method creation, and Object creation.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script></script>
```<style></style>
``</head>
``<body>
~``<canvas id="drawingBoard" width=640 height=480>

~``</canvas>
``</body>
`</html>
@header
Canvas
@comment
Add the following code to create a "canvas" element.  The "canvas" is an element that gives us the ability to draw basic lines and shapes.

We have told it to be 640 pixels wide and 480 pixels tall.

Go ahead and run the code.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script></script>
```<style>
~```canvas {
~````border: thin solid black;
~```}
```</style>
``</head>
``<body>
```<canvas id="drawingBoard" width=640 height=480>

```</canvas>
``</body>
`</html>
@header
It's Blank...
@comment
Don't worry, nothing is broken.  The canvas is just the same color as the default background.  

Refer to the example to add a border around the canvas to help it stand out.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
~``window.onload = function() {
~```var canvas = document.getElementById("drawingBoard");
~``};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
```<canvas id="drawingBoard" width=640 height=480>

```</canvas>
``</body>
`</html>
@header
Make a basic rectangle
@comment
We use "document.getElementById" in order to get a reference to the html object.  It will look through the DOM for an object with the matching id.  In this case the canvas element has the matching id, therefore the method call will give us a reference to that.

Finally we save that reference to a variable called "canvas", but you can give it any name your desire.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var canvas = document.getElementById("drawingBoard");
~```var context = canvas.getContext("2d");
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
```<canvas id="drawingBoard" width=640 height=480>

```</canvas>
``</body>
`</html>
@header
Make a basic rectangle
@comment
Use "canvas.getContext" to get the context.  This context is what we shall draw the rectangle on.  The argument we give it is "2d" because we are going to draw 2-d things.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var canvas = document.getElementById("drawingBoard");
````var context = canvas.getContext("2d");

~```//basic rectangle drawing
~```var xPos = 10;
~```var yPos = 10;
~```var width = 40;
~```var height = 60;
~```context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
```<canvas id="drawingBoard" width=640 height=480>

```</canvas>
``</body>
`</html>
@header
Make a basic rectangle
@comment
Use "context.fillRect" to draw a rectangle on the canvas.  

The first argument specifies its position on the x-axis.  

The second argument specifies its position on the y-axis.  

The third argument specifies the width of the rectangle.

The fourth argument specifies the height of the rectangle.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var canvas = document.getElementById("drawingBoard");
````var context = canvas.getContext("2d");

````//basic rectangle drawing
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
````context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
```<canvas id="drawingBoard" width=640 height=480>

```</canvas>
``</body>
`</html>
@header
A point about the y-axis
@comment
In math, the tradition is having the postive y-axis grow upwards and the negative grow down.

In graphics, the tradition is the opposite.  The positive y-axis grows down.  In other words:

Top left corner is (0, 0).

Top right corner is (639, 0).

Bottom left corner is (0, 479).

Botton right corner is (639, 479).
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var canvas = document.getElementById("drawingBoard");
````var context = canvas.getContext("2d");

````//basic rectangle drawing
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
````context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Can we create?
@comment
You can create HTML elements using JavaScript.  Lets start by removing the HTML canvas element.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
~```var canvas = document.createElement("canvas");
````var context = canvas.getContext("2d");

````//basic rectangle drawing
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
````context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
createElement
@comment
Use the "document.createElement" method to create an element.  The element it creates depends on the first argument.  In this case we told it to make a canvas element.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var canvas = document.createElement("canvas");

~```//Set Attributes of canvas
~```canvas.setAttribute("id", "drawingBoard");
~```canvas.setAttribute("width", "640");
~```canvas.setAttribute("height", "480"); 

````var context = canvas.getContext("2d");

````//basic rectangle drawing
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
````context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Size
@comment
Use "canvas.setAttribute" to set the attributes of the canvas.  Namely the id, width, and height.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var canvas = document.createElement("canvas");

````//Set Attributes of canvas
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 

````var context = canvas.getContext("2d");

````//basic rectangle drawing
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
````context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Where?
@comment
We created the canvas element via JavaScript, but we haven't placed it anywhere.  We want to place it inside the HTML body element.

How do we get a reference to the body element?  Give it an id?

We can do that, but there is an alternative we can use ...
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
~```var body = document.getElementsByTagName("body")[0];

````var canvas = document.createElement("canvas");

````//Set Attributes of canvas
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 

````var context = canvas.getContext("2d");

````//basic rectangle drawing
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
````context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
getElementsByTagName
@comment
Use the "document.getElementsByTagName" method to get an array of Elements that have the tag name.  We told it to find all the HTML body elements.

We only have one, ergo we access the very first array element then save that in the body variable.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var body = document.getElementsByTagName("body")[0];

````var canvas = document.createElement("canvas");

~```//Insert Canvas into body
~```body.appendChild(canvas);

````//Set Attributes of canvas
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 

````var context = canvas.getContext("2d");

````//basic rectangle drawing
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
````context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Is it in yet?
@comment
Lastly, we need to put the canvas inside the body.  Observe the example.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var body = document.getElementsByTagName("body")[0];

````var canvas = document.createElement("canvas");

````//Insert Canvas into body
````body.appendChild(canvas);

````//Set Attributes of canvas
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 

````var context = canvas.getContext("2d");

````//basic rectangle drawing
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
````context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Try it
@comment
If you run the program, it should show a black rectangle.  Black is the default color.  How do we change the color?
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var body = document.getElementsByTagName("body")[0];

````var canvas = document.createElement("canvas");

````//Insert Canvas into body
````body.appendChild(canvas);

````//Set Attributes of canvas
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 

````var context = canvas.getContext("2d");

````//basic rectangle drawing
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
~```context.fillStyle = "#FF0000";//RGB HEX color
````context.fillRect(xPos, yPos, width, height);
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
fillStyle
@comment
Use "context.fillStyle" to set the fill color.  When the context is asked to draw something such as a rectangle, it will look up the fillStyle to figure out what color to use.

It accepts a HEX color as a string.

Play around with the color of the rectangle.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
````context.fillStyle = "#00FF00";//RGB HEX color
~```context.beginPath();
~```context.moveTo(xPos, yPos);
~```context.lineTo(xPos + 10, yPos + 10);
~```context.stroke();
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Create a line
@comment
Use "context.beginPath" to create an empty array of points.

Use "context.moveTo" to put the first point in the array.

Use "context.lineTo" to append another point to the array of points.

Use "context.stroke" to connect the points.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
~```context.strokeStyle = "#00FF00";//RGB HEX color
````context.beginPath();
````context.moveTo(xPos, yPos);
````context.lineTo(xPos + 10, yPos + 10);
````context.stroke();
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Black Line?
@comment
You may have notice that a black line was draw, despite setting the fillStyle property.  The fillStyle property only works when you are filling in shape.

We must use strokeStyle to specify the color of the lines we draw.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
~```context.strokeStyle = "#0000FF";//RGB HEX color
````context.beginPath();
````context.moveTo(xPos, yPos);
~```context.lineTo(xPos + 10, yPos +  0);
~```context.lineTo(xPos + 10, yPos + 10);
~```context.lineTo(xPos + 20, yPos + 10);
~```context.lineTo(xPos + 20, yPos + 20);
````context.stroke();
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Zig Zag
@comment
If you append more points before calling the stroke() method, you can create a zig zag.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````var xPos = 10;
````var yPos = 10;
````var width = 40;
````var height = 60;
~```context.strokeStyle = "#FF00FF";//Purple
~```context.fillStyle = "#00FF00";//Green
````context.beginPath();
````context.moveTo(xPos, yPos);
~```context.lineTo(xPos +  0, yPos + 30);
~```context.lineTo(xPos + 30, yPos + 30);
~```context.closePath();
````context.stroke();
~```context.fill();
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Triangle with Fill
@comment
The example shows how to create a triangle with a purple outline and a green fill. 

You can only fill in a closed path, thus we use closePath() to do just that.  Thereafter we use fill() to fill it up.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
~```var xPos = 100;
~```var yPos = 100;
~```var radius = 40;
~```var startAngle = 0;
~```var endAngle = 2 * Math.PI;
~```var direction = true; //true means ccw
````context.strokeStyle = "#FF00FF";//Purple
````context.fillStyle = "#00FF00";//Green
````context.beginPath();
~```context.arc(xPos, yPos, radius, -startAngle, -endAngle, direction);
````context.closePath();
````context.stroke();
````context.fill();
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Circles
@comment
There is no fillCircle method in the canvas API.  There is however an arc method.

The example is self-explanatory.  However, you may have noticed that I intentionally made the startAngle and endAngle negative.  I do this because I am used to the Math convention of angles growing counter clockwise (ie ccw).  The graphics convention flips the y-axis and I prefer the math convention thus I turn the angles negative.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````var xPos = 100;
````var yPos = 100;
````var radius = 40;
~```var startAngle = (5*Math.PI)/12;
~```var endAngle = (3*Math.PI)/4;
````var direction = true; //true means ccw
````context.strokeStyle = "#FF00FF";//Purple
````context.fillStyle = "#00FF00";//Green
~```context.lineWidth = 3;
````context.beginPath();
````context.arc(xPos, yPos, radius, -startAngle, -endAngle, direction);
````context.closePath();
````context.stroke();
````context.fill();
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Make an arc
@comment
An arc is simply a partially drawn circle.  Therefore, I change the angle values to create an arc.

Use "context.lineWidth" to change the thickness of the strokes.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {

```};
~``function generateContext() {

~``};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Lets make a function or two
@comment
Lets create a function to help us draw.  Lets call it "generateContext".  The plan is to have this create a canvas element and give us a reference to the context.  We already did this before, thus it should be familiar.

Each function begins with the keyword "function", followed by the name of the function, followed by its parameter list.  The meat of the function are enclosed within the open and close curly braces.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {

```};
```function generateContext() {
~```var body = document.getElementsByTagName("body")[0];
~```var canvas = document.createElement("canvas");
~```body.appendChild(canvas);
~```canvas.setAttribute("id", "drawingBoard");
~```canvas.setAttribute("width", "640");
~```canvas.setAttribute("height", "480"); 
~```var context = canvas.getContext("2d");
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
function guts
@comment
This is the exact code from earlier that we used to create a canvas element, add it to the body element, and retrieve the context.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {

```};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
~```return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Lastly
@comment
Lastly, we need to have our function return something.  Since we want the context, we should return it, that way when the function is called, we will get the context.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
~```var context = generateContext();
```};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Putting it to use
@comment
lets go back to the main function, and call the function we just made.  We can save its return value into a variable called context.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var context = generateContext();
~```var color = "#FF0000";
~```drawPoint(context, 10, 10, color);
~```drawPoint(context, 30, 10, color);
~```drawPoint(context, 20, 40, color); 
```};
~``function drawPoint(context, x, y, color) {
~```context.fillStyle = color;
~```context.fillRect(x, y, 1, 1);
~``};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Draw Point function
@comment
Let's use this knowledge to build a function that draws points.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var context = generateContext();
````var color = "#FF0000";
````drawPoint(context, 10, 10, color);
````drawPoint(context, 30, 10, color);
````drawPoint(context, 20, 40, color); 
```};
```function drawPoint(context, x, y, color) {
````context.fillStyle = color;
````context.fillRect(x, y, 1, 1);
```};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Objects
@comment
It can be helpful to create objects.  Objects that we can pass around before deciding to draw them any where.  Let's create a Point class.  By convention, class names have their first letter capitalized.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var context = generateContext();
````var color = "#FF0000";
~```var p1 = new Point(context, 10, 10, color);
~```var p2 = new Point(context, 30, 10, color);
~```var p3 = new Point(context, 20, 40, color); 
```};
~``function Point(context, x, y, color) {
~```this.context = context;
~```this.x = x;
~```this.y = y;
~```this.color = color;
```};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Point class
@comment
The major difference between creating a function and creating a class is the use of "this".  Our point class has 4 variables: context, x, y, and color.  Every instance of Point will have these.  They will have their own version of the variable.

The "new" keyword indicates that we are creating a new instance of the Point class.  If you do not use it, it will not create an object.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var context = generateContext();
````var color = "#FF0000";
````var p1 = new Point(context, 10, 10, color);
````var p2 = new Point(context, 30, 10, color);
````var p3 = new Point(context, 20, 40, color); 
```};
```function Point(context, x, y, color) {
````this.context = context;
````this.x = x;
````this.y = y;
````this.color = color;
~```this.draw = function() {

~```};
```};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Draw the point
@comment
Give the Point class a variable called "draw".  We will set its default value to a closure.

When we set it up like this, we are NOT calling a function.  Instead, we are creating an alias called "draw"

Calling draw() will be like calling the closure.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var context = generateContext();
````var color = "#FF0000";
````var p1 = new Point(context, 10, 10, color);
````var p2 = new Point(context, 30, 10, color);
````var p3 = new Point(context, 20, 40, color); 
```};
```function Point(context, x, y, color) {
````this.context = context;
````this.x = x;
````this.y = y;
````this.color = color;
````this.draw = function() {
~````this.context.fillStyle = this.color;
~````this.context.fillRect(this.x, this.y, 1, 1);
````};
```};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Closure guts
@comment
Use the "this" keyword to tell the function to use the current Point's instance data.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var context = generateContext();
````var color = "#FF0000";
````var p1 = new Point(context, 10, 10, color);
````var p2 = new Point(context, 30, 10, color);
````var p3 = new Point(context, 20, 40, color); 
~```p1.draw();
~```p2.draw();
~```p3.draw();
```};
```function Point(context, x, y, color) {
````this.context = context;
````this.x = x;
````this.y = y;
````this.color = color;
````this.draw = function() {
`````this.context.fillStyle = this.color;
`````this.context.fillRect(this.x, this.y, 1, 1);
````};
```};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Point and Draw
@comment
This is how you call the draw function of the Point class.  When a function belongs to a class, it is typically called a method.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var context = generateContext();
````var color = "#FF0000";
````var p1 = new Point(context, 10, 10, color);
````var p2 = new Point(context, 30, 10, color);
````var p3 = new Point(context, 20, 40, color); 
````p1.draw();
````p2.draw();
````p3.draw();
~```color = "#FFFF00";
~```var s1 = new Square(context, 50, 50, 10, color);
~```s1.draw();
```};
~``function Square(context, x, y, width, color) {
~```this.context = context;
~```this.x = x;
~```this.y = y;
~```this.width = width;
~```this.color = color;
~```this.lineWidth = 1;
~```this.fillSquare = function() {
~````this.context.fillStyle = this.color;
~````var w = this.width;
~````this.context.fillRect(this.x, this.y, w, w);
~```};
~```this.strokeSquare = function() {
~````this.context.lineWidth = this.lineWidth;
~````this.strokeStyle = this.color;
~````this.beginPath();
~````var x = this.x;
~````var y = this.y;
~````var w = this.width;
~````this.context.moveTo(x, y);
~````this.context.lineTo(x+w, y);
~````this.context.lineTo(x+w, y+w);
~````this.context.lineTo(x, y+w);
~````this.context.closePath();
~````this.context.stroke();
~```};
~```this.draw = function() {
~````this.fillSquare();
~````this.strokeSquare();
~```};
~``};
```function Point(context, x, y, color) {
````this.context = context;
````this.x = x;
````this.y = y;
````this.color = color;
````this.draw = function() {
`````this.context.fillStyle = this.color;
`````this.context.fillRect(this.x, this.y, 1, 1);
````};
```};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Square class
@comment
An implementation of a Square class.
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var context = generateContext();
````var color = "#FF0000";
~```var c1 = new Circle(...);
~```c1.draw();
```};
~``function Circle(...) {
~```//Implementation here
~``};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Quiz
@comment
How would you implement a Circle class?
@addSlide
@code
`<!doctype html>
`<html>
``<head>
```<meta charset="utf-8">
```<script>
```window.onload = function() {
````var context = generateContext();
````var color = "#FF772B";
~```var c1 = new Circle(context, 56, 77, 10, color);
````c1.draw();
```};
~``function Circle(context, x, y, radius, color) {
~```this.context = context;
~```this.x = x;
~```this.y = y;
~```this.radius = radius;
~```this.fillColor = color;

~```this.fillCircle = function() {
~````var context = this.context;
~````context.fillStyle = this.fillColor;
~````context.beginPath();
~````context.arc(this.x, this.y, this.radius, 0, Math.PI, true);
~````context.closePath();
~````context.fill();
~```};
~```this.strokeCircle = function() {
~````var context = this.context;
~````context.strokeStyle = this.fillColor;
~````context.beginPath();
~````context.arc(this.x, this.y, this.radius, 0, Math.PI, true);
~````context.closePath();
~````context.stroke();
~```};
~```this.draw = function() {
~````this.fillCircle();
~````this.strokeCircle();
~```};
~``};
```function generateContext() {
````var body = document.getElementsByTagName("body")[0];
````var canvas = document.createElement("canvas");
````body.appendChild(canvas);
````canvas.setAttribute("id", "drawingBoard");
````canvas.setAttribute("width", "640");
````canvas.setAttribute("height", "480"); 
````var context = canvas.getContext("2d");
````return context;
```};
```</script>
```<style>
````canvas {
`````border: thin solid black;
````}
```</style>
``</head>
``<body>
``</body>
`</html>
@header
Quiz Solution
@comment
Circle Class implementation.
@addSlide
@question
Do you have a good circle angle reference?
@answer
See this reference for circles and their angles (math.rice.edu/~pcmi/sphere/degrad.gif).
@question
What's a closure?
@answer
A closure is a function that doesn't have a name.  It is like a block pointer in Objective-c.
@end